import unittest
from Graph import *
class TestCaseVertex(unittest.TestCase):
    #TestCases for the Vertex Class.

    def test_add_neighbour(self):
        #Test Cases for the add_neighbour method.
        v1 = Vertex("v1")
        v2 = Vertex("v2")
        self.assertFalse(v1.is_neighbour("v2"))
        self.assertFalse(v2.is_neighbour("v1"))
        v1.add_neighbour("v2", 3)
        self.assertFalse(v2.is_neighbour("v1"))
        self.assertTrue(v1.is_neighbour("v2"))
        self.assertEqual(v1.get_weight("v2"), 3)
        v2.add_neighbour("v1", 4)
        self.assertTrue(v2.is_neighbour("v1"))
        self.assertTrue(v1.is_neighbour("v2"))
        self.assertEqual(v2.get_weight("v1"), 4)
        self.assertEqual(v1.get_weight("v2"), 3)

    def test_is_neighbour(self):
        #Test Cases for the is_neighbour method.
        v1 = Vertex("v1")
        v2 = Vertex("v2")
        self.assertFalse(v1.is_neighbour("v2"))
        self.assertFalse(v2.is_neighbour("v1"))
        self.assertFalse(v1.is_neighbour("v3"))
        self.assertFalse(v2.is_neighbour("v3"))
        v1.add_neighbour("v2", 2)
        self.assertTrue(v1.is_neighbour("v2"))
        self.assertFalse(v2.is_neighbour("v1"))
        v2.add_neighbour("v1", 1)
        self.assertTrue(v2.is_neighbour("v1"))
        self.assertTrue(v1.is_neighbour("v2"))
        self.assertFalse(v1.is_neighbour("v3"))
        self.assertFalse(v2.is_neighbour("v3"))
        v1.add_neighbour("v3", 3)
        self.assertTrue(v1.is_neighbour("v3"))
        self.assertFalse(v2.is_neighbour("v3"))
        v2.add_neighbour("v3", 3)
        self.assertTrue(v1.is_neighbour("v3"))
        self.assertTrue(v2.is_neighbour("v3"))

    def test_remove_neighbour(self):
        #Test Cases for the remove_neighbour method
        v1 = Vertex("v1")
        v2 = Vertex("v2")
        self.assertFalse(v1.remove_neighbour("v2"))
        self.assertFalse(v2.remove_neighbour("v1"))
        self.assertFalse(v1.remove_neighbour("v3"))
        self.assertFalse(v1.is_neighbour("v2"))
        self.assertFalse(v2.is_neighbour("v1"))
        self.assertFalse(v1.is_neighbour("v3"))
        self.assertFalse(v2.is_neighbour("v3"))
        v1.add_neighbour("v2", 2)
        v1.add_neighbour("v3", 3)
        v2.add_neighbour("v1", 1)
        v2.add_neighbour("v3", 3)
        self.assertTrue(v1.is_neighbour("v2"))
        self.assertTrue(v1.is_neighbour("v3"))
        self.assertTrue(v2.is_neighbour("v1"))
        self.assertTrue(v2.is_neighbour("v3"))
        boolean1 = v1.remove_neighbour("v2")
        boolean2 = v1.remove_neighbour("v4")
        boolean3 = v1.remove_neighbour("v5")
        self.assertTrue(boolean1)
        self.assertFalse(boolean2)
        self.assertFalse(boolean3)
        self.assertFalse(v1.is_neighbour("v2"))
        self.assertTrue(v1.is_neighbour("v3"))
        self.assertTrue(v2.is_neighbour("v1"))
        boolean4 = v1.remove_neighbour("v3")
        self.assertTrue(boolean4)
        self.assertFalse(v1.is_neighbour("v3"))
        boolean5 = v2.remove_neighbour("v1")
        boolean6 = v2.remove_neighbour("v4")
        boolean7 = v2.remove_neighbour("v6")
        self.assertTrue(boolean5)
        self.assertFalse(boolean6)
        self.assertFalse(boolean7)
        self.assertFalse(v2.is_neighbour("v1"))
        self.assertTrue(v2.is_neighbour("v3"))
        boolean8 = v2.remove_neighbour("v3")
        self.assertTrue(boolean8)
        self.assertFalse(v2.is_neighbour("v3"))

    def test_get_weight(self):
        #Test Cases for the get_weight method
        v7 = Vertex("v7")
        v5 = Vertex("v5")
        v9 = Vertex("v9")
        v7.add_neighbour("v6", 6)
        v7.add_neighbour("v5", 5)
        v7.add_neighbour("v8", 8)
        v7.add_neighbour("v9", 9)
        v5.add_neighbour("v4", 4)
        v5.add_neighbour("v3", 3)
        v5.add_neighbour("v6", 6)
        v5.add_neighbour("v7", 7)
        v9.add_neighbour("v8", 8)
        v9.add_neighbour("v7", 7)
        v9.add_neighbour("v10", 10)
        v9.add_neighbour("v11", 11)
        self.assertEqual(v7.get_weight("v0"), None)
        self.assertEqual(v7.get_weight("v6"), 6)
        self.assertEqual(v7.get_weight("v5"), 5)
        self.assertEqual(v7.get_weight("v8"), 8)
        self.assertEqual(v7.get_weight("v9"), 9)
        self.assertEqual(v5.get_weight("v1"), None)
        self.assertEqual(v5.get_weight("v4"), 4)
        self.assertEqual(v5.get_weight("v3"), 3)
        self.assertEqual(v5.get_weight("v6"), 6)
        self.assertEqual(v5.get_weight("v7"), 7)
        self.assertEqual(v9.get_weight("v2"), None)
        self.assertEqual(v9.get_weight("v8"), 8)
        self.assertEqual(v9.get_weight("v7"), 7)
        self.assertEqual(v9.get_weight("v10"), 10)
        self.assertEqual(v9.get_weight("v11"), 11)


class TestCaseGraph(unittest.TestCase):
    #Test Cases for the Graph class.

    def test_is_empty(self):
        #TestCases for the is_empty method.
        graph1 = Graph()
        graph2 = Graph()
        self.assertTrue(graph1.is_empty())
        self.assertTrue(graph2.is_empty())
        graph1.add_vertex("v1")
        self.assertFalse(graph1.is_empty())
        self.assertTrue(graph2.is_empty())
        graph2.add_vertex("v2")
        self.assertFalse(graph1.is_empty())
        self.assertFalse(graph2.is_empty())
        graph1.add_vertex("v3")
        self.assertFalse(graph1.is_empty())
        self.assertFalse(graph2.is_empty())
        graph1.add_edge("v1", "v3", 1)
        self.assertFalse(graph1.is_empty())
        self.assertFalse(graph2.is_empty())
        graph2.remove_vertex("v2")
        self.assertFalse(graph1.is_empty())
        self.assertTrue(graph2.is_empty())
        graph1.remove_edge("v1", "v3")
        self.assertFalse(graph1.is_empty())
        self.assertTrue(graph2.is_empty())
        graph1.remove_vertex("v3")
        self.assertFalse(graph1.is_empty())
        graph1.remove_vertex("v1")
        self.assertTrue(graph1.is_empty())

    def test_contains(self):
        #TestCases for the contains method.
        graph1 = Graph()
        graph2 = Graph()
        self.assertFalse(graph1.contains("v1"))
        self.assertFalse(graph2.contains("v2"))
        graph1.add_vertex("v1")
        graph2.add_vertex("v2")
        self.assertTrue(graph1.contains("v1"))
        self.assertTrue(graph2.contains("v2"))
        self.assertFalse(graph1.contains("v3"))
        self.assertFalse(graph2.contains("v4"))
        graph1.add_vertex("v3")
        graph2.add_vertex("v4")
        self.assertTrue(graph1.contains("v1"))
        self.assertTrue(graph2.contains("v2"))
        self.assertTrue(graph1.contains("v3"))
        self.assertTrue(graph2.contains("v4"))
        graph1.add_edge("v1", "v3", 1)
        graph2.add_edge("v2", "v4", 2)
        self.assertTrue(graph1.contains("v1"))
        self.assertTrue(graph2.contains("v2"))
        self.assertTrue(graph1.contains("v3"))
        self.assertTrue(graph2.contains("v4"))
        graph1.remove_edge("v1", "v3")
        graph2.remove_edge("v2", "v4")
        self.assertTrue(graph1.contains("v1"))
        self.assertTrue(graph2.contains("v2"))
        self.assertTrue(graph1.contains("v3"))
        self.assertTrue(graph2.contains("v4"))
        graph1.remove_vertex("v3")
        graph2.remove_vertex("v4")
        self.assertTrue(graph1.contains("v1"))
        self.assertTrue(graph2.contains("v2"))
        self.assertFalse(graph1.contains("v3"))
        self.assertFalse(graph2.contains("v4"))
        graph1.remove_vertex("v1")
        graph2.remove_vertex("v2")
        self.assertFalse(graph1.contains("v1"))
        self.assertFalse(graph2.contains("v2"))
        self.assertFalse(graph1.contains("v3"))
        self.assertFalse(graph2.contains("v4"))

    def test_add_vertex(self):
        #TestCases for the add_vertex method.
        graph1 = Graph()
        graph2 = Graph()
        self.assertFalse(graph1.contains("v1"))
        self.assertFalse(graph1.contains("v3"))
        self.assertFalse(graph1.contains("v5"))
        self.assertFalse(graph2.contains("v2"))
        self.assertFalse(graph2.contains("v4"))
        self.assertFalse(graph2.contains("v6"))
        self.assertEqual(graph1.size, 0)
        self.assertEqual(graph2.size, 0)
        graph1.add_vertex("v1")
        graph2.add_vertex("v2")
        self.assertTrue(graph1.contains("v1"))
        self.assertFalse(graph1.contains("v3"))
        self.assertFalse(graph1.contains("v5"))
        self.assertTrue(graph2.contains("v2"))
        self.assertFalse(graph2.contains("v4"))
        self.assertFalse(graph2.contains("v6"))
        self.assertEqual(graph1.size, 1)
        self.assertEqual(graph2.size, 1)
        graph1.add_vertex("v3")
        graph2.add_vertex("v4")
        self.assertTrue(graph1.contains("v1"))
        self.assertTrue(graph1.contains("v3"))
        self.assertFalse(graph1.contains("v5"))
        self.assertTrue(graph2.contains("v2"))
        self.assertTrue(graph2.contains("v4"))
        self.assertFalse(graph2.contains("v6"))
        self.assertEqual(graph1.size, 2)
        self.assertEqual(graph2.size, 2)
        graph1.add_vertex("v5")
        graph2.add_vertex("v6")
        self.assertTrue(graph1.contains("v1"))
        self.assertTrue(graph1.contains("v3"))
        self.assertTrue(graph1.contains("v5"))
        self.assertTrue(graph2.contains("v2"))
        self.assertTrue(graph2.contains("v4"))
        self.assertTrue(graph2.contains("v6"))
        self.assertEqual(graph1.size, 3)
        self.assertEqual(graph2.size, 3)

    def test_remove_vertex(self):
        #Test Cases for the remove_vertex method.
        graph1 = Graph()
        graph2 = Graph()
        self.assertFalse(graph1.remove_vertex("v1"))
        self.assertFalse(graph2.remove_vertex("v2"))
        self.assertFalse(graph1.remove_vertex("v3"))
        self.assertFalse(graph2.remove_vertex("v4"))
        self.assertFalse(graph1.contains("v1"))
        self.assertFalse(graph2.contains("v2"))
        self.assertFalse(graph1.contains("v3"))
        self.assertFalse(graph2.contains("v4"))
        self.assertEqual(graph1.size, 0)
        self.assertEqual(graph2.size, 0)
        graph1.add_vertex("v1")
        graph1.add_vertex("v3")
        graph2.add_vertex("v2")
        graph2.add_vertex("v4")
        self.assertTrue(graph1.contains("v1"))
        self.assertTrue(graph1.contains("v3"))
        self.assertTrue(graph2.contains("v2"))
        self.assertTrue(graph2.contains("v4"))
        self.assertEqual(graph1.size, 2)
        self.assertEqual(graph2.size, 2)
        boolean1 = graph1.remove_vertex("v1")
        boolean2 = graph2.remove_vertex("v2")
        self.assertTrue(boolean1)
        self.assertTrue(boolean2)
        self.assertFalse(graph1.contains("v1"))
        self.assertTrue(graph1.contains("v3"))
        self.assertFalse(graph2.contains("v2"))
        self.assertTrue(graph2.contains("v4"))
        self.assertEqual(graph1.size, 1)
        self.assertEqual(graph2.size, 1)
        boolean3 = graph1.remove_vertex("v3")
        boolean4 = graph2.remove_vertex("v4")
        self.assertTrue(boolean3)
        self.assertTrue(boolean4)
        self.assertFalse(graph1.contains("v1"))
        self.assertFalse(graph1.contains("v3"))
        self.assertFalse(graph2.contains("v2"))
        self.assertFalse(graph2.contains("v4"))
        self.assertEqual(graph1.size, 0)
        self.assertEqual(graph2.size, 0)

    def test_add_edge(self):
        #TestCases for the add_edge method.
        graph1 = Graph()
        graph2 = Graph()
        graph1.add_vertex("v1")
        graph2.add_vertex("v2")
        graph1.add_vertex("v3")
        graph2.add_vertex("v4")
        graph1.add_vertex("v5")
        graph2.add_vertex("v6")
        self.assertEqual(graph1.get_weight("v1", "v3"), None)
        self.assertEqual(graph1.get_weight("v3", "v1"), None)
        self.assertEqual(graph1.get_weight("v1", "v5"), None)
        boolean1 = graph1.add_edge("v1", "v3", 3)
        boolean2 = graph1.add_edge("v3", "v1", 1)
        boolean3 = graph1.add_edge("v1", "v5", 5)
        boolean4 = graph1.add_edge("v7", "v9", 9)
        boolean5 = graph1.add_edge("v1", "v7", 7)
        boolean6 = graph1.add_edge("v9", "v1", 1)
        self.assertEqual(graph1.get_weight("v1", "v3"), 3)
        self.assertEqual(graph1.get_weight("v3", "v1"), 1)
        self.assertEqual(graph1.get_weight("v1", "v5"), 5)
        self.assertEqual(graph2.get_weight("v2", "v4"), None)
        self.assertEqual(graph2.get_weight("v4", "v2"), None)
        self.assertEqual(graph2.get_weight("v2", "v6"), None)
        boolean7 = graph2.add_edge("v2", "v4", 4)
        boolean8 = graph2.add_edge("v4", "v2", 2)
        boolean9 = graph2.add_edge("v2", "v6", 6)
        boolean10 = graph2.add_edge("v8", "v10", 10)
        boolean11 = graph2.add_edge("v2", "v8", 8)
        boolean12 = graph2.add_edge("v10", "v2", 2)
        self.assertEqual(graph2.get_weight("v2", "v4"), 4)
        self.assertEqual(graph2.get_weight("v4", "v2"), 2)
        self.assertEqual(graph2.get_weight("v2", "v6"), 6)
        self.assertEqual(graph1.get_weight("v7", "v9"), None)
        self.assertEqual(graph2.get_weight("v8", "v10"), None)
        self.assertTrue(boolean1)
        self.assertTrue(boolean2)
        self.assertTrue(boolean3)
        self.assertFalse(boolean4)
        self.assertFalse(boolean5)
        self.assertFalse(boolean6)
        self.assertTrue(boolean7)
        self.assertTrue(boolean8)
        self.assertTrue(boolean9)
        self.assertFalse(boolean10)
        self.assertFalse(boolean11)
        self.assertFalse(boolean12)

    def test_remove_edge(self):
        #Test Cases for the remove_edge method.
        graph1 = Graph()
        graph2 = Graph()
        graph1.add_vertex("v1")
        graph1.add_vertex("v2")
        graph1.add_vertex("v3")
        graph1.add_vertex("v4")
        graph2.add_vertex("v5")
        graph2.add_vertex("v6")
        graph1.add_edge("v1", "v2", 2)
        graph1.add_edge("v2", "v3", 3)
        graph1.add_edge("v3", "v4", 4)
        graph2.add_edge("v5", "v6", 6)
        graph2.add_edge("v6", "v5", 5)
        self.assertEqual(graph1.get_weight("v1", "v2"), 2)
        self.assertEqual(graph1.get_weight("v2", "v3"), 3)
        self.assertEqual(graph1.get_weight("v3", "v4"), 4)
        boolean1 = graph1.remove_edge("v1", "v2")
        self.assertEqual(graph1.get_weight("v1", "v2"), None)
        self.assertTrue(boolean1)
        boolean2 = graph1.remove_edge("v2", "v3")
        self.assertEqual(graph1.get_weight("v2", "v3"), None)
        self.assertTrue(boolean2)
        boolean3 = graph1.remove_edge("v3", "v4")
        self.assertEqual(graph1.get_weight("v3", "v4"), None)
        self.assertTrue(boolean3)
        boolean4 = graph1.remove_edge("v1", "v2")
        boolean5 = graph1.remove_edge("v1", "v7")
        boolean6 = graph1.remove_edge("v8", "v2")
        boolean7 = graph1.remove_edge("v9", "v10")
        self.assertFalse(boolean4)
        self.assertFalse(boolean5)
        self.assertFalse(boolean6)
        self.assertFalse(boolean7)
        self.assertEqual(graph2.get_weight("v5", "v6"), 6)
        self.assertEqual(graph2.get_weight("v6", "v5"), 5)
        boolean8 = graph2.remove_edge("v5", "v6")
        boolean9 = graph2.remove_edge("v6", "v5")
        self.assertEqual(graph2.get_weight("v5", "v6"), None)
        self.assertEqual(graph2.get_weight("v6", "v5"), None)
        self.assertTrue(boolean8)
        self.assertTrue(boolean9)

    def test_get_weight_graph(self):
        #TestCases for the get_weight.
        graph = Graph()
        self.assertEqual(graph.get_weight("v1", "v2"), None)
        graph.add_vertex("v1")
        graph.add_vertex("v2")
        graph.add_vertex("v3")
        graph.add_vertex("v4")
        graph.add_edge("v1", "v2", 2)
        graph.add_edge("v2", "v3", 3)
        graph.add_edge("v3", "v4", 4)
        graph.add_edge("v4", "v1", 1)
        self.assertEqual(graph.get_weight("v1", "v2"), 2)
        self.assertEqual(graph.get_weight("v2", "v3"), 3)
        self.assertEqual(graph.get_weight("v3", "v4"), 4)
        self.assertEqual(graph.get_weight("v4", "v1"), 1)
        self.assertEqual(graph.get_weight("v1", "v5"), None)
        self.assertEqual(graph.get_weight("v6", "v2"), None)
        self.assertEqual(graph.get_weight("v7", "v8"), None)


if __name__ == '__main__':
    unittest.main()
    