import unittest
from AVLTree import *

class TestCases(unittest.TestCase):
    #TestCases for the AVL-Tree Data Structure.

    def test_is_empty(self):
        #TestCases for the is_empty method.
        tree1 = AVLTree()
        self.assertTrue(tree1.is_empty())
        tree1.insert(10, "10")
        self.assertFalse(tree1.is_empty())
        tree1.delete(10)
        self.assertTrue(tree1.is_empty())
        tree1.insert(10, "10")
        tree1.insert(7, "7")
        self.assertFalse(tree1.is_empty())
        tree1.delete(7)
        self.assertFalse(tree1.is_empty())
        tree1.delete(10)
        self.assertTrue(tree1.is_empty())
        tree2=AVLTree()
        self.assertTrue(tree2.is_empty())
        tree2.insert(17, "17")
        tree2.insert(15, "15")
        tree2.insert(18, "18")
        self.assertFalse(tree2.is_empty())
        tree2.delete(17)
        tree2.delete(15)
        tree2.delete(18)
        self.assertTrue(tree2.is_empty())

    def test_get_height(self):
        #TestCases for the get_height method.
        tree = AVLTree()
        self.assertEqual(tree.get_height(tree.root), -1)
        tree.insert(20, "20")
        tree.insert(10, "10")
        tree.insert(30, "30")
        tree.insert(5, "5")
        tree.insert(15, "15")
        tree.insert(25, "25")
        tree.insert(40, "40")
        self.assertEqual(tree.get_height(tree.root), 2)
        self.assertEqual(tree.get_height(tree.root.left), 1)
        self.assertEqual(tree.get_height(tree.root.right), 1)
        self.assertEqual(tree.get_height(tree.root.left.left), 0)
        self.assertEqual(tree.get_height(tree.root.left.right), 0)
        self.assertEqual(tree.get_height(tree.root.right.left), 0)
        self.assertEqual(tree.get_height(tree.root.right.right), 0)
        self.assertEqual(tree.get_height(tree.root.left.left.left), -1)
        self.assertEqual(tree.get_height(tree.root.right.right.right), -1)

    def test_search(self):
        #TestCases for the search method.
        tree1 = AVLTree()
        tree1.insert(2, "2")
        self.assertEqual(tree1.search(2), "2")
        tree2 = AVLTree()
        tree2.insert(4, "4")
        tree2.insert(3, "3")
        tree2.insert(5, "5")
        self.assertEqual(tree2.search(1), None)
        self.assertEqual(tree2.search(2), None)
        self.assertEqual(tree2.search(3), "3")
        self.assertEqual(tree2.search(4), "4")
        self.assertEqual(tree2.search(5), "5")
        self.assertEqual(tree2.search(6), None)
        tree3 = AVLTree()
        tree3.insert(20, "20")
        tree3.insert(10, "10")
        tree3.insert(30, "30")
        tree3.insert(5, "5")
        tree3.insert(15, "15")
        tree3.insert(25, "25")
        tree3.insert(40, "40")
        self.assertEqual(tree3.search(20), "20")
        self.assertEqual(tree3.search(10), "10")
        self.assertEqual(tree3.search(30), "30")
        self.assertEqual(tree3.search(5), "5")
        self.assertEqual(tree3.search(15), "15")
        self.assertEqual(tree3.search(25), "25")
        self.assertEqual(tree3.search(40), "40")
        self.assertEqual(tree3.search(45), None)
        self.assertEqual(tree3.search(50), None)
        self.assertEqual(tree3.search(1), None)

    def test_insert(self):
        #TestCases for the insert method.
        tree1 = AVLTree()
        self.assertTrue(tree1.is_empty())
        self.assertEqual(tree1.search(20), None)
        self.assertTrue(tree1.insert(20, "20"))
        self.assertEqual(tree1.search(20), "20")
        self.assertEqual(tree1.search(10), None)
        self.assertFalse(tree1.is_empty())
        self.assertTrue(tree1.insert(10, "10"))
        self.assertEqual(tree1.search(10), "10")
        self.assertEqual(tree1.search(30), None)
        self.assertFalse(tree1.is_empty())
        self.assertTrue(tree1.insert(30, "30"))
        self.assertEqual(tree1.search(30), "30")
        self.assertFalse(tree1.is_empty())
        self.assertEqual(tree1.search(5), None)
        self.assertTrue(tree1.insert(5, "5"))
        self.assertEqual(tree1.search(5), "5")
        self.assertEqual(tree1.search(15), None)
        self.assertFalse(tree1.is_empty())
        self.assertTrue(tree1.insert(15, "15"))
        self.assertEqual(tree1.search(15), "15")
        self.assertFalse(tree1.is_empty())
        self.assertEqual(tree1.search(25), None)
        self.assertTrue(tree1.insert(25, "25"))
        self.assertEqual(tree1.search(25), "25")
        self.assertEqual(tree1.search(40), None)
        self.assertFalse(tree1.is_empty())
        self.assertTrue(tree1.insert(40, "40"))
        self.assertEqual(tree1.search(40), "40")
        self.assertFalse(tree1.is_empty())
        self.assertEqual(tree1.search(45), None)
        self.assertEqual(tree1.search(1), None)
        self.assertEqual(tree1.search(18), None)
        self.assertFalse(tree1.is_empty())

    def test_delete(self):
        #TestCases for the delete method.
        #Case where node has no children and is the root of the Tree.
        tree1 = AVLTree()
        tree1.insert(17, "17")
        self.assertEqual(tree1.search(17), "17")
        self.assertFalse(tree1.is_empty())
        self.assertEqual(tree1.root.value, "17")
        tree1.delete(17)
        self.assertEqual(tree1.search(17), None)
        self.assertEqual(tree1.root, None)
        self.assertTrue(tree1.is_empty())
        #Cases where node has 1 child and is the root of the Tree.
        tree2 = AVLTree()
        tree2.insert(19, "19")
        tree2.insert(14, "14")
        tree2.delete(19)
        self.assertEqual(tree2.search(19), None)
        self.assertEqual(tree2.root.value, "14")
        tree3 = AVLTree()
        tree3.insert(29, "29")
        tree3.insert(33, "33")
        tree3.delete(29)
        self.assertEqual(tree3.search(29), None)
        self.assertEqual(tree3.root.value, "33")
        #Cases where node has 2 children and is the root of the Tree.
        tree4 = AVLTree()
        tree4.insert(18, "18")
        tree4.insert(16, "16")
        tree4.insert(20, "20")
        tree4.delete(18)
        self.assertEqual(tree4.search(18), None)
        self.assertEqual(tree4.root.value, "20")
        tree5 = AVLTree()
        tree5.insert(15, "15")
        tree5.insert(20, "20")
        tree5.insert(11, "11")
        tree5.insert(17, "17")
        tree5.insert(22, "22")
        tree5.delete(15)
        self.assertEqual(tree5.search(15), None)
        self.assertEqual(tree5.root.value, "17")
        #Cases where node has no children and is not the root of the Tree.
        tree6 = AVLTree()
        tree6.insert(39, "39")
        tree6.insert(47, "47")
        tree6.insert(34, "34")
        tree6.delete(47)
        tree6.delete(34)
        self.assertEqual(tree6.search(47), None)
        self.assertEqual(tree6.search(34), None)
        self.assertEqual(tree6.root.left, None)
        self.assertEqual(tree6.root.right, None)
        tree7 = AVLTree()
        tree7.insert(45, "45")
        tree7.insert(30, "30")
        tree7.insert(60, "60")
        tree7.insert(20, "20")
        tree7.insert(35, "35")
        tree7.insert(50, "50")
        tree7.insert(65, "65")
        tree7.delete(20)
        tree7.delete(35)
        tree7.delete(50)
        tree7.delete(65)
        self.assertEqual(tree7.search(20), None)
        self.assertEqual(tree7.search(35), None)
        self.assertEqual(tree7.search(50), None)
        self.assertEqual(tree7.search(65), None)
        self.assertEqual(tree7.root.left.left, None)
        self.assertEqual(tree7.root.left.right, None)
        self.assertEqual(tree7.root.right.left, None)
        self.assertEqual(tree7.root.right.right, None)
        #Cases where node has one child and is not the root of the Tree.
        tree8 = AVLTree()
        tree8.insert(49, "49")
        tree8.insert(67, "67")
        tree8.insert(14, "14")
        tree8.insert(12, "12")
        tree8.delete(14)
        self.assertEqual(tree8.search(14), None)
        self.assertEqual(tree8.root.left.left, None)
        self.assertEqual(tree8.root.left.value, "12")
        tree9 = AVLTree()
        tree9.insert(23, "23")
        tree9.insert(56, "56")
        tree9.insert(13, "13")
        tree9.insert(15, "15")
        tree9.delete(13)
        self.assertEqual(tree9.search(13), None)
        self.assertEqual(tree9.root.left.right, None)
        self.assertEqual(tree9.root.left.value, "15")
        #Case where node has two children and is not the root of the Tree.
        tree10 = AVLTree()
        tree10.insert(45, "45")
        tree10.insert(30, "30")
        tree10.insert(60, "60")
        tree10.insert(20, "20")
        tree10.insert(35, "35")
        tree10.insert(50, "50")
        tree10.insert(65, "65")
        tree10.delete(60)
        self.assertEqual(tree10.search(60), None)
        self.assertEqual(tree10.root.right.value, "65")
        self.assertEqual(tree10.root.right.right, None)
        tree11 = AVLTree()
        tree11.insert(50, "50")
        tree11.insert(25, "25")
        tree11.insert(60, "60")
        tree11.insert(20, "20")
        tree11.insert(30, "30")
        tree11.insert(55, "55")
        tree11.insert(65, "65")
        tree11.insert(27, "27")
        tree11.delete(25)
        self.assertEqual(tree11.search(25), None)
        self.assertEqual(tree11.root.left.value, "27")
        self.assertEqual(tree11.root.left.right.left, None)


if __name__ == '__main__':
    unittest.main()
    